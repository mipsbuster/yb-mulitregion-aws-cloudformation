---
AWSTemplateFormatVersion: "2010-09-09"

Description: "marquette YB base build creates VPC and public and private subnets"

Parameters:
  VpcCIDR:
    Description: "Enter IP range for this vpc"
    Type: String

  PublicSubnet1CIDR:
    Description: "Enter IP range for this public subnet 1"
    Type: String

  PrivateSubnet1CIDR:
    Description: "Enter IP range for this private subnet 1"
    Type: String

  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to access the web server using SSH.
    MaxLength: '18'
    MinLength: '9'
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: True
      EnableDnsSupport: True
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: marquette-YBDemo

# Create internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: marquette-YBDemo-IGW

# Create Attachment
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

# Create Public Subnet1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: marquette-YBDemoYB-PublicSubnet1
      VpcId: !Ref VPC

# Create Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: marquette-YBDemo-PublicRoute
      VpcId: !Ref VPC

# Add a Public Route to the Route Table
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

# Associate Public Subnet1 with Public Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

# Create Private Subnet1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: False
      Tags:
        - Key: Name
          Value: marquette-YBDemo-PrivateSubnet1
      VpcId: !Ref VPC

# Create Security Group for the Application Load Balancer
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP/HTTPS on ports 80/443/8080
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: marquette-YBDemoVer-ALBsg
      VpcId: !Ref VPC

# Create Security Group for the Bastion Host aka Jump Box
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value: Mark-YBDemoVer0-1-sshsg
      VpcId: !Ref VPC

# Create Security Group for the Web Server
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: web server sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 9100
          ToPort: 9100
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 7700
          ToPort: 7700
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      Tags:
        - Key: Name
          Value: Mark-YBDemo-webserversg
      VpcId: !Ref VPC

# Create Security Group for the DataBase
  DataBaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Database place holder
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8
          ToPort: 64000
          CidrIp: !Ref PublicSubnet1CIDR
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: !Ref PublicSubnet1CIDR
        - IpProtocol: tcp
          FromPort: 8
          ToPort: 64000
          CidrIp: !Ref PrivateSubnet1CIDR
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: !Ref PrivateSubnet1CIDR
      Tags:
        - Key: Name
          Value: Mark-YBDemo-databasesg
      VpcId: !Ref VPC